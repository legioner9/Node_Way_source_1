({
  Id: {
    type: 'object',
    class: 'Uint64',
    parse: x => {
      if (typeof x === 'string' && Number.isNaN(Number(x))) {
        throw new TypeError(
          'Cannot construct Uint64 from invalid number string'
        );
      }
      return new api.common.Uint64(x);
    }
  },
  Nomen: { type: 'string', length: 60 },
  IP: { type: 'string', length: 45, check: x => api.net.isIP(x) },
  ServerType: Enum('Root', 'Server', 'Backup', 'Reserve'),
});
