const { _require } = require ( 'st_require' );
const events = require ( 'events' ).EventEmitter;

const arht = {};

arht.at = fn => {

    // define Development MODE

    const DEV = fn.dev;

    const MODE = fn.mode;

    // define EVENT
    const EVENT = fn.event;

    // define MODULE
    const MODULE = fn.module;

    // define PRESET
    const PRESET = fn.preset;

    const EXTER = fn.exterState;

    const INNER = fn.innerState;

    const STACK = fn.l_stack;

    // start signal of fn
    // fn.event.emit ( '_start', ENV );

    // push innerState - example ENV:
    // fn.event.emit ( '_innerState', fn.innerState );

    // pull externalState
    // fn.event.on ( '_externalState', d => { // d typeof Object
    //     fn.exterState = d;
    // } );

    // define Development MODE

    return {
        DEV,
        MODE,
        EVENT,
        MODULE,
        PRESET,
        EXTER,
        INNER,
        STACK
    };
};

arht.out = ( fn ) => {
    const EventEmitter = require ( 'events' );

    fn.help = `ModuleFunc = () => {}`;

    fn.call = () => console.log ( fn );

    fn.mode = {
        deb: false,
        log: false,
        debLog: false,
        logFs: false,
        stack: false
    };

    fn.event = new EventEmitter;

    // migrate to AtOut_fm.path
    // fn.module = init_module;

    fn.preset = {};

    fn.exterState = {};

    fn.innerState = {};

    fn.dev = false;
};

arht.prop = fn => {

    const { l_log, l_deb, l_log_deb, l_fsLog, l_fsLogErr, l_stack, dirDeepOptions } = require ( 'st_ini_deep1' );

    fn.dirDeepOptions = dirDeepOptions;

    fn.l_log = l_log;
    fn.l_deb = l_deb;
    fn.l_log_deb = l_log_deb;
    fn.l_fsLog = l_fsLog;
    fn.l_fsLogErr = l_fsLogErr;
    fn.l_stack = l_stack;

};

arht.before = ( fn, init_module = 'empty' ) => {
    fn.module = init_module;
};

module.exports = arht;
