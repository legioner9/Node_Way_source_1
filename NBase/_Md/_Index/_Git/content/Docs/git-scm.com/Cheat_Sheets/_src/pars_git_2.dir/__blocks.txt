<dt class="workspace index status" style="margin-left: 286.094px; width: 246.25px;">status<div class="arrow"></div></dt><dd>Displays: &lt;br&gt;• paths that have differences between the index file and the current &lt;code&gt;HEAD&lt;/code&gt; commit, &lt;br&gt;• paths that have differences between the workspace and the index file, and &lt;br&gt;• paths in the workspace that are not tracked by git.</dd>
<dt class="workspace index status" style="margin-left: 286.094px; width: 246.25px;">diff<div class="arrow"></div></dt><dd>Displays the differences not added to the index.</dd>
<dt class="workspace local_repo status" style="margin-left: 286.094px; width: 505px;">diff <em>commit or branch</em><div class="arrow"></div></dt><dd>View the changes you have in your workspace relative to the named &lt;em&gt;commit&lt;/em&gt;. You can use &lt;code&gt;HEAD&lt;/code&gt; to compare it with the latest commit, or a branch name to compare with the tip of a different branch</dd>
<dt class="workspace index up" style="margin-left: 286.094px; width: 246.25px;">add <em>file... or dir...</em><div class="arrow"></div></dt><dd>Adds the current content of new or modified files to the index, thus staging that content for inclusion in the next commit. Use &lt;code&gt;add --interactive&lt;/code&gt; to add the modified contents in the workspace interactively to the index.</dd>
<dt class="workspace index up" style="margin-left: 286.094px; width: 246.25px;">add -u<div class="arrow"></div></dt><dd>Adds the current content of modified (NOT NEW) files to the index.  This is similar to what &lt;code&gt;git commit -a&lt;/code&gt; does in preparation for making a commit.</dd>
<dt class="workspace index up" style="margin-left: 286.094px; width: 246.25px;">rm <em>file(s)...</em><div class="arrow"></div></dt><dd>Remove a file from the workspace and the index.</dd>
<dt class="workspace index up" style="margin-left: 286.094px; width: 246.25px;">mv <em>file(s)...</em><div class="arrow"></div></dt><dd>Move file in the workspace and the index.</dd>
<dt class="workspace local_repo up cc_pointer" style="margin-left: 286.094px; width: 505px;">commit -a <span class="optional">-m 'msg'</span><div class="arrow"></div></dt><dd>Commit all files changed since your last commit, except untracked files (i.e. all files that are already listed in the index). Remove files in the index that have been removed from the workspace.</dd>
<dt class="workspace index dn" style="margin-left: 286.094px; width: 246.25px;">checkout <em>files(s)... or dir</em><div class="arrow"></div></dt><dd>Updates the file or directory in the workspace. Does NOT switch branches.</dd>
<dt class="index status" style="margin-left: 452.344px; width: 220px;">reset HEAD <em>file(s)...</em><div class="arrow"></div></dt><dd>Remove the specified files from the next commit. Resets the index but not the working tree (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated.</dd>
<dt class="index local_repo dn cc_pointer" style="margin-left: 552.344px; width: 238.75px;">reset --soft HEAD^<div class="arrow"></div></dt><dd>Undo the last commit, leaving changes in the index.</dd>
<dt class="workspace local_repo dn" style="margin-left: 286.094px; width: 505px;">reset --hard<div class="arrow"></div></dt><dd>Matches the workspace and index to the local tree. WARNING: Any changes to tracked files in the working tree since commit are lost. Use this if merging has resulted in conflicts and you'd like to start over. Pass &lt;code&gt;ORIG_HEAD&lt;/code&gt; to undo the most recent successful merge and any changes after.</dd>
<dt class="workspace local_repo dn" style="margin-left: 286.094px; width: 505px;">reset --hard <em>remote</em>/<em>branch</em><div class="arrow"></div></dt><dd>Reset local repo and working tree to match a remote-tracking branch. Use &lt;code&gt;reset &amp;#8209;&amp;#8209;hard origin/master&lt;/code&gt; to throw away all commits to the local master branch. Use this to start over on a failed merge.</dd>
<dt class="workspace local_repo dn" style="margin-left: 286.094px; width: 505px;">switch <em>branch</em><div class="arrow"></div></dt><dd>Switches branches by updating the index and workspace to reflect the specified branch, &lt;em&gt;branch&lt;/em&gt;, and updating &lt;code&gt;HEAD&lt;/code&gt; to be &lt;em&gt;branch&lt;/em&gt;.</dd>
<dt class="workspace local_repo dn" style="margin-left: 286.094px; width: 505px;">checkout -b <em>name of new branch</em><div class="arrow"></div></dt><dd>Create a branch and switch to it</dd>
<dt class="workspace local_repo dn" style="margin-left: 286.094px; width: 505px;">merge <em>commit or branch</em><div class="arrow"></div></dt><dd>Merge changes from &lt;em&gt;branch name&lt;/em&gt; into current branch.&lt;br&gt;Use &lt;code&gt;&amp;#8209;&amp;#8209;no-commit&lt;/code&gt; to leave changes uncommitted. Use &lt;code&gt;--no-ff&lt;/code&gt; to create a merge commit even if the merge resolves as a fast forward.</dd>
<dt class="workspace local_repo dn" style="margin-left: 286.094px; width: 505px;">rebase <em>upstream</em><div class="arrow"></div></dt><dd>Reverts all commits since the current branch diverged from &lt;em&gt;upstream&lt;/em&gt;, and then re-applies them one-by-one on top of changes from the &lt;code&gt;HEAD&lt;/code&gt; of &lt;em&gt;upstream&lt;/em&gt;.</dd>
<dt class="workspace local_repo dn" style="margin-left: 286.094px; width: 505px;">cherry-pick <em>commit</em><div class="arrow"></div></dt><dd>Integrate changes in the given commit into the current branch.</dd>
<dt class="workspace local_repo dn" style="margin-left: 286.094px; width: 505px;">revert <em>commit</em><div class="arrow"></div></dt><dd>Reverse commit specified by &lt;em&gt;commit&lt;/em&gt; and commit the result. This requires your working tree to be clean (no modifications from the &lt;code&gt;HEAD&lt;/code&gt; commit).</dd>
<dt class="index local_repo status cc_pointer selected" style="margin-left: 552.344px; width: 238.75px;">diff --cached <span class="optional"><em>commit</em></span><div class="arrow"></div></dt><dd>View the changes you staged vs the latest commit. Can pass a &lt;em&gt;commit&lt;/em&gt; to see changes relative to it.</dd>
<dt class="index local_repo up cc_pointer" style="margin-left: 552.344px; width: 238.75px;">commit <span class="optional">-m 'msg'</span><div class="arrow"></div></dt><dd>Stores the current contents of the index in a new commit along with a log message from the user describing the changes.</dd>
<dt class="index local_repo up" style="margin-left: 552.344px; width: 238.75px;">commit --amend<div class="arrow"></div></dt><dd>Modify the last commit with the current index changes.</dd>
<dt class="local_repo status cc_pointer" style="margin-left: 711.094px; width: 220px;">log<div class="arrow"></div></dt><dd>Show recent commits, most recent on top. Options:&lt;br&gt;&lt;code&gt;&amp;#8209;&amp;#8209;decorate&lt;/code&gt; with branch and tag names on appropriate commits&lt;br&gt;&lt;code&gt;&amp;#8209;&amp;#8209;stat&lt;/code&gt; with stats (files changed, insertions, and deletions) &lt;br&gt;&lt;code&gt;&amp;#8209;&amp;#8209;author=&lt;em&gt;author&lt;/em&gt;&lt;/code&gt;  only by a certain author&lt;br&gt;&lt;code&gt;&amp;#8209;&amp;#8209;after="MMM DD YYYY"&lt;/code&gt; ex. (&lt;code&gt;Jun 20 2008&lt;/code&gt;) only commits after a certain date&lt;br&gt;&lt;code&gt;&amp;#8209;&amp;#8209;before="MMM DD YYYY"&lt;/code&gt; only commits that occur before a certain date &lt;br&gt;&lt;code&gt;&amp;#8209;&amp;#8209;merge&lt;/code&gt; only the commits involved in the current merge conflicts</dd>
<dt class="local_repo status" style="margin-left: 711.094px; width: 220px;">diff <em>commit</em> <em>commit</em><div class="arrow"></div></dt><dd>View the changes between two arbitrary commits</dd>
<dt class="local_repo status" style="margin-left: 711.094px; width: 220px;">branch<div class="arrow"></div></dt><dd>List all existing branches. Option &lt;code&gt;-r&lt;/code&gt; causes the remote-tracking branches to be listed, and option &lt;code&gt;-a&lt;/code&gt; shows both.</dd>
<dt class="local_repo status" style="margin-left: 711.094px; width: 220px;">branch -d <em>branch</em><div class="arrow"></div></dt><dd>Delete an specified branch. Use &lt;code&gt;-D&lt;/code&gt; to force.</dd>
<dt class="local_repo dn cc_pointer" style="margin-left: 711.094px; width: 220px;">branch --track <em>new</em> <em>remote/branch</em><div class="arrow"></div></dt><dd>Create a new local branch from a remote-tracking branch.</dd>
<dt class="workspace remote_repo dn" style="margin-left: 286.094px; width: 771.25px;">clone <em>repo</em><div class="arrow"></div></dt><dd>Download the repository specified by &lt;em&gt;repo&lt;/em&gt; and checkout &lt;code&gt;HEAD&lt;/code&gt; of the master branch.</dd>
<dt class="workspace remote_repo dn" style="margin-left: 286.094px; width: 771.25px;">pull <em>remote</em> <em>refspec</em><div class="arrow"></div></dt><dd>Incorporates changes from a remote repository into the current branch. In its default mode, &lt;code&gt;git pull&lt;/code&gt; is shorthand for &lt;code&gt;git fetch&lt;/code&gt; followed by &lt;code&gt;git merge FETCH_HEAD&lt;/code&gt;.</dd>
<dt class="local_repo remote_repo dn" style="margin-left: 811.094px; width: 246.25px;">fetch <em>remote</em> <em>refspec</em><div class="arrow"></div></dt><dd>Download objects and refs from another repository.</dd>
<dt class="local_repo remote_repo up" style="margin-left: 811.094px; width: 246.25px;">push<div class="arrow"></div></dt><dd>Update the server with your commits across all branches that are *COMMON* between your local copy and the server. Local branches that were never pushed to the server in the first place are not shared.</dd>
<dt class="local_repo remote_repo up" style="margin-left: 811.094px; width: 246.25px;">push <em>remote</em> <em>branch</em><div class="arrow"></div></dt><dd>Push new (or existing) branch to remote repository</dd>
<dt class="local_repo remote_repo up" style="margin-left: 811.094px; width: 246.25px;">push <em>remote</em> <em>branch</em>:<em>branch</em><div class="arrow"></div></dt><dd>Push new branch to remote repository with a different name</dd>
<dt class="remote_repo status" style="margin-left: 977.344px; width: 220px;">push <em>remote</em> :<em>branch</em><div class="arrow"></div></dt><dd>Remove a remote branch. Literally "push nothing to this branch".</dd>
<dt class="workspace dn" style="margin-left: 186.094px; width: 220px;">clean<div class="arrow"></div></dt><dd>Cleans the working tree by recursively removing files that are not under version control, starting from the current directory. Use &lt;code&gt;-n&lt;/code&gt; for a "dry run" to see what would be deleted. Use &lt;code&gt;-f&lt;/code&gt; to delete the files.</dd>
<dt class="stash index dn" style="margin-left: 68.5938px; width: 463.75px;">stash push <span class="optional"><em>msg</em></span><div class="arrow"></div></dt><dd>Save your local modifications to a new stash, and run &lt;code&gt;git reset &amp;#8209;&amp;#8209;hard&lt;/code&gt; to revert them. The &lt;em&gt;msg&lt;/em&gt; part is optional and gives the description along with the stashed state. For quickly making a snapshot, you can omit both &lt;code&gt;save&lt;/code&gt; and &lt;em&gt;msg&lt;/em&gt;.</dd>
<dt class="stash index up" style="margin-left: 68.5938px; width: 463.75px;">stash pop<div class="arrow"></div></dt><dd>Applies the changes from the last (or specified) stash and then removes the given stash.</dd>
<dt class="stash index up" style="margin-left: 68.5938px; width: 463.75px;">stash apply <span class="optional"><em>stash</em></span><div class="arrow"></div></dt><dd>Move changes from the specified stash into the workspace. The latest stash is the default.</dd>
<dt class="stash status" style="margin-left: -10px; width: 220px;">stash list<div class="arrow"></div></dt><dd>List the stashes that you currently have.</dd>
<dt class="stash status" style="margin-left: -10px; width: 220px;">stash show <span class="optional"><em>stash</em></span><div class="arrow"></div></dt><dd>Show the changes recorded in the stash as a diff between the stashed state and its original parent. When no &lt;em&gt;stash&lt;/em&gt; is given, shows the latest one.</dd>
<dt class="stash status" style="margin-left: -10px; width: 220px;">stash drop <span class="optional"><em>stash</em></span><div class="arrow"></div></dt><dd>Remove a single stashed state from the stash list. When no &lt;em&gt;stash&lt;/em&gt; is given, it removes the latest one.</dd>
<dt class="stash status" style="margin-left: -10px; width: 220px;">stash clear<div class="arrow"></div></dt><dd>Remove all the stashed states. Note that those states will then be subject to pruning, and may be impossible to recover.</dd>
<dt class="stash local_repo up" style="margin-left: 68.5938px; width: 722.5px;">stash branch <em>branchname</em> <span class="optional"><em>stash</em></span><div class="arrow"></div></dt><dd>Creates and checks out a new branch named &lt;em&gt;branchname&lt;/em&gt; starting from the commit at which the &lt;em&gt;stash&lt;/em&gt; was originally created, applies the changes recorded in &lt;em&gt;stash&lt;/em&gt; to the new working tree and index. &lt;br&gt;If that succeeds, and &lt;em&gt;stash&lt;/em&gt; is a reference of the form stash@{&lt;em&gt;revision&lt;/em&gt;}, it then drops the &lt;em&gt;stash&lt;/em&gt;. When no &lt;em&gt;stash&lt;/em&gt; is given, applies the latest one. &lt;br&gt;This is useful if the branch on which you ran &lt;code&gt;git stash push&lt;/code&gt; has changed enough that &lt;code&gt;git stash apply&lt;/code&gt; fails due to conflicts. Since the stash is applied on top of the commit that was &lt;code&gt;HEAD&lt;/code&gt; at the time &lt;code&gt;git stash&lt;/code&gt; was run, it restores the originally stashed state with no conflicts.</dd>